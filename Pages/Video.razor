@page "/video"
@using MauiApp3.Data;
@using MauiApp3.Model;
@inject DYService dyService;
@inject IJSRuntime js;
<div class="video_box" @onclick="OnClick"  @ontouchstart=OnTouchStart  @ontouchend=OnTouchEnd   data-tap-disabled="true">
    <video webkit-playsinline="true" @onclick="OnClick" controls controlsList="nofullscreen"  playsinline="true" loop="loop" autoplay class="video @showClass">
    </video>
</div>
<div class="video_info">
    <div class="video_time">2023-01-01</div>
    <div class="video_title">正在加载</div>
</div>
@code {
    private int touchDistance = 100;
    private long touchStartTime = 0;
    private long touchEndTime = 0;
    private TouchPoint touchStartPoint;
    private TouchPoint touchEndPoint;
    private string showClass = "videoBottom";
    private long lastClickTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
    private int clickCount = 0;
    private DYInfo videoInfo;
    private  CancellationTokenSource cts= new CancellationTokenSource();
    //videoDm
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        videoInfo= await dyService.GetNextUrlAsync();
        if (string.IsNullOrEmpty(videoInfo.id))
        {
            await js.InvokeVoidAsync("setVideoInfo", "未获取数据");
            return;
        }
        await js.InvokeVoidAsync("videoPlay", videoInfo.url, videoInfo.title,videoInfo.createtime);
        LoadingDanmu();
    }
    private void OnClick()
    {
        var currentTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
        if (currentTime - lastClickTime < 500)
        {
            clickCount++;
        }
        if (clickCount == 3)
        {
            clickCount = 0;
            if (showClass == "videoTop")
            {
                showClass = "videoBottom";
            }
            else
            {
                showClass = "videoTop";
            }
        }
        lastClickTime = currentTime;
    }
    private void OnTouchStart(TouchEventArgs e)
    {
        var point=  e.ChangedTouches;
        touchStartPoint = point[0];
        touchStartTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();

    }
    private async void OnTouchEnd(TouchEventArgs e)
    {
        var point = e.ChangedTouches;
        touchEndPoint = point[0];
        touchEndTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
        if (touchEndTime - touchStartTime > 250)
        {
            var offset = touchEndPoint.ClientY - touchStartPoint.ClientY;
            if (offset <-touchDistance)
            {
                cts.Cancel();
                await js.InvokeVoidAsync("clearDm");
                showClass = "videoBottom";
                videoInfo = await dyService.GetNextUrlAsync();
                if (string.IsNullOrEmpty(videoInfo.url))
                {
                    
                    await js.InvokeVoidAsync("setVideoInfo","没有下一条数据了");
                }
                else
                {
                    await js.InvokeVoidAsync("videoPlay", videoInfo.url, videoInfo.title, videoInfo.createtime);
                    cts = new CancellationTokenSource();
                    LoadingDanmu();

                }

            }
            else if(offset>touchDistance)
            {
                cts.Cancel();
                await js.InvokeVoidAsync("clearDm");
                showClass = "videoBottom";
                videoInfo = dyService.GetLast();
                if (string.IsNullOrEmpty(videoInfo.url))
                {
                    await js.InvokeVoidAsync("setVideoInfo", "没有下一条数据了");
                }
                else
                {
                    await js.InvokeVoidAsync("videoPlay", videoInfo.url, videoInfo.title, videoInfo.createtime);
                    cts = new CancellationTokenSource();
                    LoadingDanmu();
                }


            }

        }

    }
    private async Task LoadingDanmu()
    {
        if (!string.IsNullOrEmpty(videoInfo.id))
        {
            var dm= await dyService.GetDanmaKu(videoInfo.id,endtime:videoInfo.duration);
            if (dm.status_code == 0&&dm.danmaku_list!=null&&dm.danmaku_list.Length>0)
            {
                PeriodicTimer periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(Random.Shared
                .Next(5, 10)));
                int count = dm.danmaku_list.Length;               
                int skipCount = 0;
                while (await periodicTimer.WaitForNextTickAsync(cts.Token))
                {
                    if (skipCount < count)
                    {
                        var takeCount = Random.Shared.Next(5, 20);
                        var items = dm.danmaku_list.Skip(skipCount).Take(takeCount);
                        skipCount += takeCount;
                        await js.InvokeVoidAsync("videoDm", items.Select(x=>x.text).ToArray());
                    }
                    else
                    {
                        cts.Cancel();
                    }
                }


            }
            else
            {
                 
                  await js.InvokeVoidAsync("videoDm", dm.status_msg);
            }
        }

    }
}
